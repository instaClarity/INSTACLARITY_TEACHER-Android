/**
 * INSTACLARITY TEACHER APIS
 * INSTACLARITY TEACHER APIS
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.swagger.client.api;

import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import io.swagger.client.ApiException;
import io.swagger.client.ApiInvoker;
import io.swagger.client.BaseModel;
import io.swagger.client.BuildConfig;
import io.swagger.client.Pair;
import io.swagger.client.model.User;
import io.swagger.client.request.multipart.MultiPartBody;


public class UserApi {
    String basePath = BuildConfig.SERVER_URL;
    ApiInvoker apiInvoker = ApiInvoker.getInstance();

    public void addHeader(String key, String value) {
        getInvoker().addDefaultHeader(key, value);
    }

    public ApiInvoker getInvoker() {
        return apiInvoker;
    }

    public void setBasePath(String basePath) {
        this.basePath = basePath;
    }

    public String getBasePath() {
        return basePath;
    }

    /**
    * Login API
    * Login API
       * @param authorization Bearer public token.   * @param user 
    */
    public void login (String authorization, User user, final Response.Listener<BaseModel<User>> responseListener, final Response.ErrorListener errorListener)
    {
        Object postBody = user;

        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling login",
                    new ApiException(400, "Missing the required parameter 'authorization' when calling login"));
        }
        

        // create path and map variables
        String path = "/api/teacher/login/".replaceAll("\\{format\\}","json");

        // query params
        List<Pair> queryParams = new ArrayList<Pair>();
        // header params
        Map<String, String> headerParams = new HashMap<>();
        // form params
        Map<String, String> formParams = new HashMap<>();


        headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));

        // Check if array is empty inside and "array-exist" condition is true.
        String contentType =  "application/json";

        if (contentType.startsWith("multipart/form-data"))
        {
            MultiPartBody.Builder builder = new MultiPartBody.Builder().setType(MultiPartBody.FORM);
            //HttpEntity httpEntity = localVarBuilder.build();
            postBody = builder.build();
        }
        else
        {
            // normal form params
            
        }
        String[] authNames = new String[] {  };

        try {
            Type containerType = new TypeToken< BaseModel<User>>(){}.getType();
            apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,containerType,
            new Response.Listener<Object>() {
                @Override
                public void onResponse(Object localVarResponse) {
                    // responseListener.onResponse((User)
                    responseListener.onResponse((BaseModel<User>) localVarResponse);
                    }
                }, new Response.ErrorListener() {
                @Override
                    public void onErrorResponse(VolleyError error) {
                    errorListener.onErrorResponse(error);
                }
            });
        } catch (ApiException ex) {
          errorListener.onErrorResponse(new VolleyError(ex));
        }
    }
    /**
    * Sign up
    * Sign up
       * @param authorization Bearer public token.   * @param user 
    */
    public void signUp (String authorization, User user, final Response.Listener<BaseModel<User>> responseListener, final Response.ErrorListener errorListener)
    {
        Object postBody = user;

        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling signUp",
                    new ApiException(400, "Missing the required parameter 'authorization' when calling signUp"));
        }
        

        // create path and map variables
        String path = "/api/teacher/signup/".replaceAll("\\{format\\}","json");

        // query params
        List<Pair> queryParams = new ArrayList<Pair>();
        // header params
        Map<String, String> headerParams = new HashMap<>();
        // form params
        Map<String, String> formParams = new HashMap<>();


        headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));

        // Check if array is empty inside and "array-exist" condition is true.
        String contentType =  "application/json";

        if (contentType.startsWith("multipart/form-data"))
        {
            MultiPartBody.Builder builder = new MultiPartBody.Builder().setType(MultiPartBody.FORM);
            //HttpEntity httpEntity = localVarBuilder.build();
            postBody = builder.build();
        }
        else
        {
            // normal form params
            
        }
        String[] authNames = new String[] {  };

        try {
            Type containerType = new TypeToken< BaseModel<User>>(){}.getType();
            apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,containerType,
            new Response.Listener<Object>() {
                @Override
                public void onResponse(Object localVarResponse) {
                    // responseListener.onResponse((User)
                    responseListener.onResponse((BaseModel<User>) localVarResponse);
                    }
                }, new Response.ErrorListener() {
                @Override
                    public void onErrorResponse(VolleyError error) {
                    errorListener.onErrorResponse(error);
                }
            });
        } catch (ApiException ex) {
          errorListener.onErrorResponse(new VolleyError(ex));
        }
    }
}
