/**
 * INSTACLARITY API
 * INSTACLARITY API
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.swagger.client.request.multipart;

import android.util.Log;

import com.android.volley.AuthFailureError;
import com.android.volley.DefaultRetryPolicy;
import com.android.volley.NetworkResponse;
import com.android.volley.ParseError;
import com.android.volley.Request;
import com.android.volley.Response;
import com.android.volley.toolbox.HttpHeaderParser;
import com.google.gson.Gson;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Type;
import java.util.Map;

import okio.Buffer;

public class MultiPartRequest extends Request<Object> implements MultipartHurlStack.ProgressListener
{
    private RequestBody multipartBody;
    private Response.Listener mListener;
    private Map<String, String> mHeaders;
    private static final String PROTOCOL_CHARSET = "utf-8";
    // private Class mModelClass;
    private Type mResponseContainerType;
    private Gson gson = new Gson();
    private MultipartHurlStack.ProgressListener progressListener;

    public MultiPartRequest(int method, String url, Map<String, String> headers, RequestBody multipartBody, Type responseContainerType, Response.Listener
            listener, Response.ErrorListener errorListener, MultipartHurlStack.ProgressListener
            progressListener)
    {
        super(method, url, errorListener);
        mListener = listener;
        this.multipartBody = multipartBody;
        mHeaders = headers;
        mResponseContainerType = responseContainerType;
        this.progressListener = progressListener;
        setRetryPolicy(new DefaultRetryPolicy(120000, DefaultRetryPolicy.DEFAULT_MAX_RETRIES,
                DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));
        //mModelClass = modelClass;
    }

    @Override
    public String getBodyContentType()
    {
        // CHECK
//        return contentType;
        return multipartBody.contentType().toString();
    }

    public long getContentLength()
    {
        try
        {
            return multipartBody.contentLength();
        }
        catch (IOException e)
        {
            e.printStackTrace();
            return -1;
        }
    }

    @Override
    public byte[] getBody() throws AuthFailureError
    {
        Buffer buffer = new Buffer();
        try
        {
            multipartBody.writeTo(buffer);
        }
        catch (IOException e)
        {
            e.printStackTrace();
            return null;
        }
        return buffer.readByteArray();
    }

    @Override
    protected Response parseNetworkResponse(NetworkResponse response)
    {
        try
        {
            String responseString = new String(response.data, HttpHeaderParser.parseCharset
                    (response.headers, PROTOCOL_CHARSET));
            Log.i("MULTIPART-RESPONSE", responseString + " IS_EMPTY");

            if (mResponseContainerType == null)
            {
                return Response.success(responseString, HttpHeaderParser.parseCacheHeaders
                        (response));
            }
            else
            {
                return Response.success(gson.fromJson(responseString, mResponseContainerType),
                        HttpHeaderParser.parseCacheHeaders(response));
            }

        }
        catch (UnsupportedEncodingException e)
        {
            return Response.error(new ParseError(e));
        }
        catch (Exception e)
        {
            return Response.error(new ParseError(e));
        }
    }

    @Override
    protected void deliverResponse(Object response)
    {
        mListener.onResponse(response);
    }

    /* (non-Javadoc)
     * @see com.android.volley.Request#getHeaders()
     */
    @Override
    public Map<String, String> getHeaders() throws AuthFailureError
    {
        return mHeaders == null ? super.getHeaders() : mHeaders;
    }

    public boolean isFixedStreamingMode()
    {
        return true;
    }

    @Override
    public void onProgress(int progress)
    {
        if (progressListener != null)
        {
            progressListener.onProgress(progress);
        }
    }
}
